package main

import (
	"log"
	"os"

	"github.com/gin-gonic/gin"
	"github.com/go-redis/redis/v8"
	"github.com/joho/godotenv"

	"socialnetwork/internal/otp"
	"socialnetwork/internal/user"
	"socialnetwork/pkg/config"
	"socialnetwork/pkg/email"
	"socialnetwork/pkg/sms"
	"socialnetwork/routes"
)

func main() {
	// Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env
	err := godotenv.Load()
	if err != nil {
		log.Println("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file .env ho·∫∑c l·ªói khi load, d√πng bi·∫øn m√¥i tr∆∞·ªùng h·ªá th·ªëng")
	}

	// K·∫øt n·ªëi MongoDB
	db, err := config.ConnectMongoDB()
	if err != nil {
		log.Fatalf("‚ùå MongoDB connection failed: %v", err)
	}

	// K·∫øt n·ªëi Redis
	redisAddr := os.Getenv("REDIS_ADDR")
	if redisAddr == "" {
		redisAddr = "localhost:6379"
	}
	redisClient := redis.NewClient(&redis.Options{Addr: redisAddr})
	if _, err := redisClient.Ping(redisClient.Context()).Result(); err != nil {
		log.Fatalf("‚ùå Redis connection failed: %v", err)
	}

	// Kh·ªüi t·∫°o email sender (SMTP ho·∫∑c mock)
	smtpHost := os.Getenv("SMTP_HOST")
	smtpPort := os.Getenv("SMTP_PORT")
	smtpUser := os.Getenv("SMTP_USERNAME")
	smtpPass := os.Getenv("SMTP_PASSWORD")

	var emailSender email.EmailSender
	if smtpHost != "" && smtpUser != "" && smtpPass != "" {
		emailSender = email.NewSMTPEmailSender(smtpHost, smtpPort, smtpUser, smtpPass)
		log.Println("‚úÖ Using real SMTP email sender")
	} else {
		emailSender = email.NewMockEmailSender()
		log.Println("‚ö†Ô∏è SMTP config missing. Using mock email sender")
	}

	// Kh·ªüi t·∫°o SMS sender (mock)
	smsSender := sms.NewMockSMSSender()
	log.Println("‚úÖ Using MockSMS sender")

	// --- Kh·ªüi t·∫°o services theo ƒë√∫ng th·ª© t·ª± ---

	// 1. Repository ng∆∞·ªùi d√πng
	userRepo := user.NewRepository(db)

	// 2. Service OTP (ph·∫£i t·∫°o tr∆∞·ªõc userService v√¨ userService c·∫ßn d√πng)
	otpService := otp.NewService(redisClient, emailSender, smsSender)

	// 3. Service User: truy·ªÅn otpService v√†o ƒë√∫ng (thay v√¨ nil)
	userService := user.NewService(userRepo, otpService, emailSender)

	// 4. Kh·ªüi t·∫°o handler
	userHandler := user.NewHandler(userService)
	otpHandler := otp.NewOTPHandler(otpService)

	// --- Thi·∫øt l·∫≠p Gin ---
	gin.SetMode(gin.ReleaseMode)
	r := gin.New()
	r.Use(gin.Logger(), gin.Recovery())

	if err := r.SetTrustedProxies([]string{"127.0.0.1"}); err != nil {
		log.Fatalf("‚ùå Failed to set trusted proxies: %v", err)
	}

	// ƒêƒÉng k√Ω route
	r.POST("/register", userHandler.Register)
	r.POST("/login", userHandler.Login)
	routes.UserRoutes(r, db, userHandler)
	routes.OTProutes(r, otpHandler)

	// Kh·ªüi ƒë·ªông server
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}
	log.Println("üöÄ Server is running at port:", port)
	if err := r.Run(":" + port); err != nil {
		log.Fatalf("‚ùå Failed to start server: %v", err)
	}
}
