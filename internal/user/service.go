package user

import (
	"context"
	"errors"
	"fmt"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"socialnetwork/dto/request"
	"socialnetwork/internal/otp"
	"socialnetwork/models"
	"socialnetwork/pkg/auth"
	"socialnetwork/pkg/email"
	"strings"
	"time"

	"go.mongodb.org/mongo-driver/bson"
)

type Service interface {
	Register(ctx context.Context, user *models.User) error
	LoginEmail(ctx context.Context, email, password string) (string, error)
	LoginPhone(ctx context.Context, phone, password string) (string, error)
	GetByID(ctx context.Context, id string) (*models.User, error)
	GetAllUsers(ctx context.Context) ([]*models.User, error)
	UpdateProfile(ctx context.Context, id string, req *request.UpdateProfileRequest) error
	ChangePassword(ctx context.Context, userID string, req *request.ChangePasswordRequest) error
	SendForgotPasswordOTP(ctx context.Context, email string) error
	ResetPassword(ctx context.Context, req *request.ResetPasswordRequest) error
	ChangeEmailRequest(ctx context.Context, userID string, req *request.ChangeEmailRequest) error
	VerifyEmailRequest(ctx context.Context, userID string, req *request.VerifyEmailRequest) error
	SendFriendRequest(ctx context.Context, fromID, toID primitive.ObjectID) error
	AcceptFriendRequest(ctx context.Context, userID, requesterID primitive.ObjectID) error
	BlockUser(ctx context.Context, userID, targetID primitive.ObjectID) error
	ToggleHideProfile(ctx context.Context, userID primitive.ObjectID, hide bool) error
	CancelFriendRequest(ctx context.Context, fromID, toID primitive.ObjectID) error
	FriendRequestExists(ctx context.Context, fromID, toID primitive.ObjectID) (bool, error)
}

type service struct {
	repo        Repository
	otpService  otp.Service // interface qu·∫£n l√Ω OTP
	emailSender email.EmailSender
}

func NewService(repo Repository, otpService otp.Service, emailSender email.EmailSender) Service {
	return &service{
		repo:        repo,
		otpService:  otpService,
		emailSender: emailSender,
	}
}

func (s *service) Register(ctx context.Context, user *models.User) error {
	hashedPassword, err := auth.HashPassword(user.Password)
	// fmt.Println("Password tr∆∞·ªõc khi l∆∞u:", hashedPassword)
	if err != nil {
		return err
	}
	user.Password = hashedPassword
	return s.repo.Create(ctx, user)
}

func (s *service) LoginEmail(ctx context.Context, email, password string) (string, error) {
	user, err := s.repo.FindByEmail(ctx, email)

	if err != nil {
		return "", errors.New("t√†i kho·∫£n kh√¥ng t·ªìn t·∫°i")
	}

	// fmt.Println("DEBUG LOGIN")
	// fmt.Println("M·∫≠t kh·∫©u ng∆∞·ªùi d√πng nh·∫≠p:", password)
	// fmt.Println("Hash l∆∞u trong DB:", user.Password)
	// fmt.Println("Check result:", auth.CheckPasswordHash(password, user.Password))

	if !auth.CheckPasswordHash(password, user.Password) {
		return "", errors.New("m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng")
	}

	token, err := auth.GenerateJWT(user.ID.Hex())
	if err != nil {
		return "", err
	}

	return token, nil
}

func (s *service) LoginPhone(ctx context.Context, phone, password string) (string, error) {
	user, err := s.repo.FindByPhone(ctx, phone)
	if err != nil {
		return "", errors.New("t√†i kho·∫£n kh√¥ng t·ªìn t·∫°i")
	}
	if user == nil {
		return "", errors.New("t√†i kho·∫£n kh√¥ng t·ªìn t·∫°i")
	}

	if !auth.CheckPasswordHash(password, user.Password) {
		return "", errors.New("m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng")
	}

	token, err := auth.GenerateJWT(user.ID.Hex())
	if err != nil {
		return "", err
	}

	return token, nil
}

func (s *service) GetByID(ctx context.Context, id string) (*models.User, error) {
	return s.repo.FindByID(ctx, id)
}

func (s *service) GetAllUsers(ctx context.Context) ([]*models.User, error) {
	return s.repo.FindAll(ctx)
}

func (s *service) UpdateProfile(ctx context.Context, id string, req *request.UpdateProfileRequest) error {
	update := bson.M{}

	if req.DisplayName != "" {
		update["displayName"] = req.DisplayName
	}
	if req.Bio != "" {
		update["bio"] = req.Bio
	}
	if req.Gender != "" {
		update["gender"] = req.Gender
	}
	if req.BirthDate != nil {
		update["birthDate"] = req.BirthDate
	}
	if req.AvatarURL != "" {
		update["avatarUrl"] = req.AvatarURL
	}
	if req.CoverURL != "" {
		update["coverUrl"] = req.CoverURL
	}
	if req.Location != "" {
		update["location"] = req.Location
	}
	if req.Website != "" {
		update["website"] = req.Website
	}
	if req.Phone != "" {
		update["phone"] = req.Phone
	}

	if len(update) == 0 {
		return nil // kh√¥ng c√≥ g√¨ ƒë·ªÉ c·∫≠p nh·∫≠t
	}

	return s.repo.UpdateByID(ctx, id, bson.M{"$set": update})
}

func (s *service) ChangePassword(ctx context.Context, userID string, req *request.ChangePasswordRequest) error {
	user, err := s.repo.FindByID(ctx, userID)
	if err != nil {
		return err
	}

	if !auth.CheckPasswordHash(req.OldPassword, user.Password) {
		return errors.New("m·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng")
	}

	hashedPassword, err := auth.HashPassword(req.NewPassword)
	if err != nil {
		return err
	}

	update := bson.M{
		"$set": bson.M{
			"password": hashedPassword,
		},
	}

	return s.repo.UpdateByID(ctx, userID, update)
}

// G·ª≠i m√£ OTP qu√™n m·∫≠t kh·∫©u
func (s *service) SendForgotPasswordOTP(ctx context.Context, email string) error {
	_, err := s.repo.FindByEmail(ctx, email)
	if err != nil {
		return errors.New("email kh√¥ng t·ªìn t·∫°i")
	}

	return s.otpService.SendForgotPasswordOTP(ctx, email)
}

// Reset m·∫≠t kh·∫©u b·∫±ng OTP
func (s *service) ResetPassword(ctx context.Context, req *request.ResetPasswordRequest) error {
	// T·∫°o VerifyOTPRequest t·ª´ req
	verifyReq := &models.VerifyOTPRequest{
		Identifier: req.Email,
		Purpose:    "forgot_password",
		OTP:        req.OTP,
		Channel:    "email",
	}

	// Ki·ªÉm tra OTP h·ª£p l·ªá
	if err := s.otpService.VerifyOTP(ctx, verifyReq); err != nil {
		return errors.New("m√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n")
	}

	user, err := s.repo.FindByEmail(ctx, req.Email)
	if err != nil {
		return errors.New("Email kh√¥ng t·ªìn t·∫°i")
	}

	hashedPassword, err := auth.HashPassword(req.NewPassword)
	if err != nil {
		return err
	}

	update := bson.M{
		"$set": bson.M{
			"password": hashedPassword,
		},
	}

	if err := s.repo.UpdateByID(ctx, user.ID.Hex(), update); err != nil {
		return err
	}

	// Xo√° OTP sau khi d√πng
	s.otpService.DeleteOTP(ctx, "forgot_password:"+req.Email)

	return nil
}

func (s *service) ChangeEmailRequest(ctx context.Context, userID string, req *request.ChangeEmailRequest) error {
	user, err := s.repo.FindByID(ctx, userID)
	if err != nil {
		return errors.New("ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i")
	}

	if user.Email != req.OldEmail {
		return errors.New("email hi·ªán t·∫°i kh√¥ng ƒë√∫ng")
	}

	existingUser, err := s.repo.FindByEmail(ctx, req.NewEmail)
	if err == nil && existingUser != nil {
		return errors.New("email m·ªõi ƒë√£ t·ªìn t·∫°i")
	}

	// üîê T·∫°o OTP
	otp := otp.GenerateOTP(6)

	// üîë L∆∞u v√†o Redis: key = change_email:<userID>, value = <newEmail>:<otp>
	key := fmt.Sprintf("change_email:%s", user.ID.Hex())
	value := fmt.Sprintf("%s:%s", req.NewEmail, otp)

	err = s.otpService.SaveOTP(ctx, key, value, 5*time.Minute)
	if err != nil {
		return errors.New("kh√¥ng th·ªÉ l∆∞u m√£ OTP")
	}

	// ‚úâÔ∏è G·ª≠i OTP qua email m·ªõi
	message := fmt.Sprintf("M√£ x√°c th·ª±c thay ƒë·ªïi email c·ªßa b·∫°n l√† %s. C√≥ hi·ªáu l·ª±c trong 5 ph√∫t.", otp)
	err = s.otpService.SendRawEmail(ctx, req.NewEmail, "X√°c th·ª±c thay ƒë·ªïi email", message)
	if err != nil {
		return errors.New("kh√¥ng th·ªÉ g·ª≠i email x√°c th·ª±c")
	}

	return nil
}

func (s *service) VerifyEmailRequest(ctx context.Context, userID string, req *request.VerifyEmailRequest) error {
	key := fmt.Sprintf("change_email:%s", userID)

	val, err := s.otpService.GetRawOTP(ctx, key)
	if err != nil {
		return errors.New("m√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n")
	}

	parts := strings.Split(val, ":")
	if len(parts) != 2 {
		return errors.New("d·ªØ li·ªáu OTP kh√¥ng h·ª£p l·ªá")
	}

	newEmail := parts[0]
	storedOTP := parts[1]

	if req.OTP != storedOTP {
		return errors.New("m√£ OTP kh√¥ng ch√≠nh x√°c")
	}

	user, err := s.repo.FindByID(ctx, userID)
	if err != nil {
		return errors.New("ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i")
	}

	update := bson.M{
		"$set": bson.M{
			"email":      newEmail,
			"isVerified": true,
			"updatedAt":  time.Now(),
		},
	}

	if err := s.repo.UpdateByID(ctx, user.ID.Hex(), update); err != nil {
		return err
	}

	// X√≥a OTP sau khi d√πng
	s.otpService.DeleteOTP(ctx, key)

	return nil
}

func (s *service) SendFriendRequest(ctx context.Context, fromID, toID primitive.ObjectID) error {
	if fromID == toID {
		return errors.New("kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu cho ch√≠nh m√¨nh")
	}
	return s.repo.SendFriendRequest(ctx, fromID, toID)
}

func (s *service) AcceptFriendRequest(ctx context.Context, receiverID, senderID primitive.ObjectID) error {
	// 1. L·∫•y th√¥ng tin ng∆∞·ªùi nh·∫≠n (receiver)
	receiver, err := s.repo.FindByID(ctx, receiverID.Hex())
	if err != nil {
		return fmt.Errorf("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi nh·∫≠n l·ªùi m·ªùi")
	}

	// 2. Ki·ªÉm tra xem sender c√≥ n·∫±m trong friendRequests c·ªßa receiver kh√¥ng
	found := false
	for _, id := range receiver.FriendRequests {
		if id == senderID {
			found = true
			break
		}
	}
	if !found {
		return fmt.Errorf("Kh√¥ng c√≥ l·ªùi m·ªùi k·∫øt b·∫°n t·ª´ ng∆∞·ªùi n√†y")
	}

	// 3. C·∫≠p nh·∫≠t c·∫£ 2 user: th√™m v√†o friends, x√≥a kh·ªèi friendRequests
	// S·ª≠ d·ª•ng repository ƒë·ªÉ c·∫≠p nh·∫≠t
	updateReceiver := bson.M{
		"$pull":     bson.M{"friendRequests": senderID},
		"$addToSet": bson.M{"friends": senderID},
	}
	if err := s.repo.UpdateByID(ctx, receiverID.Hex(), updateReceiver); err != nil {
		return fmt.Errorf("L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi nh·∫≠n")
	}

	updateSender := bson.M{
		"$addToSet": bson.M{"friends": receiverID},
	}
	if err := s.repo.UpdateByID(ctx, senderID.Hex(), updateSender); err != nil {
		return fmt.Errorf("L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi g·ª≠i")
	}

	return nil
}

func (s *service) BlockUser(ctx context.Context, userID, targetID primitive.ObjectID) error {
	if userID == targetID {
		return errors.New("kh√¥ng th·ªÉ ch·∫∑n ch√≠nh m√¨nh")
	}
	return s.repo.BlockUser(ctx, userID, targetID)
}

func (s *service) ToggleHideProfile(ctx context.Context, userID primitive.ObjectID, hide bool) error {
	return s.repo.ToggleHideProfile(ctx, userID, hide)
}

func (s *service) CancelFriendRequest(ctx context.Context, fromID, toID primitive.ObjectID) error {
	return s.repo.CancelFriendRequest(ctx, fromID, toID)
}

func (s *service) FriendRequestExists(ctx context.Context, fromID, toID primitive.ObjectID) (bool, error) {
	return s.repo.FriendRequestExists(ctx, fromID, toID)
}
